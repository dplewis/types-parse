/* v2.1.0 */
/** Declaration file generated by dts-gen */

export class ACL {
    constructor(arg1: any);

    equals(other: any): any;

    getPublicReadAccess(): any;

    getPublicWriteAccess(): any;

    getReadAccess(userId: any): any;

    getRoleReadAccess(role: any): any;

    getRoleWriteAccess(role: any): any;

    getWriteAccess(userId: any): any;

    setPublicReadAccess(allowed: any): void;

    setPublicWriteAccess(allowed: any): void;

    setReadAccess(userId: any, allowed: any): void;

    setRoleReadAccess(role: any, allowed: any): void;

    setRoleWriteAccess(role: any, allowed: any): void;

    setWriteAccess(userId: any, allowed: any): void;

    toJSON(): any;

}

export class Config {
    constructor();

    escape(attr: any): any;

    get(attr: any): any;

    static current(): any;

    static get(): any;

}

export class Error {
    constructor(code: any, message: any);

    toString(): any;

    static ACCOUNT_ALREADY_LINKED: number;

    static AGGREGATE_ERROR: number;

    static CACHE_MISS: number;

    static COMMAND_UNAVAILABLE: number;

    static CONNECTION_FAILED: number;

    static DUPLICATE_VALUE: number;

    static EMAIL_MISSING: number;

    static EMAIL_NOT_FOUND: number;

    static EMAIL_TAKEN: number;

    static EXCEEDED_QUOTA: number;

    static FILE_DELETE_ERROR: number;

    static FILE_READ_ERROR: number;

    static FILE_SAVE_ERROR: number;

    static FILE_TOO_LARGE: number;

    static INCORRECT_TYPE: number;

    static INTERNAL_SERVER_ERROR: number;

    static INVALID_ACL: number;

    static INVALID_CHANNEL_NAME: number;

    static INVALID_CLASS_NAME: number;

    static INVALID_CONTENT_LENGTH: number;

    static INVALID_EMAIL_ADDRESS: number;

    static INVALID_EVENT_NAME: number;

    static INVALID_FILE_NAME: number;

    static INVALID_IMAGE_DATA: number;

    static INVALID_JSON: number;

    static INVALID_KEY_NAME: number;

    static INVALID_LINKED_SESSION: number;

    static INVALID_NESTED_KEY: number;

    static INVALID_POINTER: number;

    static INVALID_PUSH_TIME_ERROR: number;

    static INVALID_QUERY: number;

    static INVALID_ROLE_NAME: number;

    static INVALID_SCHEMA_OPERATION: number;

    static INVALID_SESSION_TOKEN: number;

    static LINKED_ID_MISSING: number;

    static MISSING_CONTENT_LENGTH: number;

    static MISSING_CONTENT_TYPE: number;

    static MISSING_OBJECT_ID: number;

    static MUST_CREATE_USER_THROUGH_SIGNUP: number;

    static NOT_INITIALIZED: number;

    static OBJECT_NOT_FOUND: number;

    static OBJECT_TOO_LARGE: number;

    static OPERATION_FORBIDDEN: number;

    static OTHER_CAUSE: number;

    static PASSWORD_MISSING: number;

    static PUSH_MISCONFIGURED: number;

    static REQUEST_LIMIT_EXCEEDED: number;

    static SCRIPT_FAILED: number;

    static SESSION_MISSING: number;

    static TIMEOUT: number;

    static UNSAVED_FILE_ERROR: number;

    static UNSUPPORTED_SERVICE: number;

    static USERNAME_MISSING: number;

    static USERNAME_TAKEN: number;

    static VALIDATION_ERROR: number;

    static X_DOMAIN_REQUEST: number;

    static captureStackTrace(p0: any, p1: any): any;

    static stackTraceLimit: number;

}

export class File {
    constructor(name: any, data: any, type: any);

    equals(other: any): any;

    name(): any;

    save(options: any): any;

    toJSON(): any;

    url(options: any): any;

    static encodeBase64(bytes: any): any;

    static fromJSON(obj: any): any;

}

export class GeoPoint {
    constructor(arg1: any, arg2: any);

    equals(other: any): any;

    kilometersTo(point: any): any;

    milesTo(point: any): any;

    radiansTo(point: any): any;

    toJSON(): any;

    static current(): any;

}

export class LiveQueryClient {
    constructor(_ref: any);

    close(): void;

    open(): void;

    resubscribe(): void;

    shouldOpen(): any;

    subscribe(query: any, sessionToken: any): any;

    unsubscribe(subscription: any): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

}

export class Object {
    constructor(className: any, attributes: any, options: any, ...args: any[]);

    add(attr: any, item: any): any;

    addAll(attr: any, items: any): any;

    addAllUnique(attr: any, items: any): any;

    addUnique(attr: any, item: any): any;

    clear(): any;

    clone(): any;

    destroy(options: any): any;

    dirty(attr: any): any;

    dirtyKeys(): any;

    equals(other: any): any;

    escape(attr: any): any;

    existed(): any;

    fetch(options: any): any;

    fetchWithInclude(keys: any, options: any): any;

    get(attr: any): any;

    getACL(): any;

    has(attr: any): any;

    increment(attr: any, amount: any): any;

    initialize(): void;

    isNew(): any;

    isValid(): any;

    newInstance(): any;

    op(attr: any): any;

    relation(attr: any): any;

    remove(attr: any, item: any): any;

    removeAll(attr: any, items: any): any;

    revert(): void;

    save(arg1: any, arg2: any, arg3: any): any;

    set(key: any, value: any, options: any): any;

    setACL(acl: any, options: any): any;

    toJSON(seen: any): any;

    toPointer(): any;

    unset(attr: any, options: any): any;

    validate(attrs: any): any;

    static createWithoutData(id: any): any;

    static destroyAll(list: any, ...args: any[]): any;

    static disableSingleInstance(): void;

    static enableSingleInstance(): void;

    static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

    static fetchAll(list: any, ...args: any[]): any;

    static fetchAllIfNeeded(list: any, options: any): any;

    static fetchAllWithInclude(list: any, keys: any, options: any): any;

    static fromJSON(json: any, override: any): any;

    static registerSubclass(className: any, constructor: any): void;

    static saveAll(list: any, ...args: any[]): any;

}

export class Polygon {
    constructor(arg1: any);

    containsPoint(point: any): any;

    equals(other: any): any;

    toJSON(): any;

}

export class Query {
    constructor(objectClass: any);

    addAscending(...args: any[]): any;

    addDescending(...args: any[]): any;

    aggregate(pipeline: any, options: any): any;

    ascending(...args: any[]): any;

    containedBy(key: any, value: any): any;

    containedIn(key: any, value: any): any;

    contains(key: any, value: any): any;

    containsAll(key: any, values: any): any;

    containsAllStartingWith(key: any, values: any): any;

    count(options: any): any;

    descending(...args: any[]): any;

    distinct(key: any, options: any): any;

    doesNotExist(key: any): any;

    doesNotMatchKeyInQuery(key: any, queryKey: any, query: any): any;

    doesNotMatchQuery(key: any, query: any): any;

    each(callback: any, options: any): any;

    endsWith(key: any, value: any): any;

    equalTo(key: any, value: any): any;

    exists(key: any): any;

    find(options: any): any;

    first(options: any): any;

    fullText(key: any, value: any, options: any): any;

    get(objectId: any, options: any): any;

    greaterThan(key: any, value: any): any;

    greaterThanOrEqualTo(key: any, value: any): any;

    include(...args: any[]): any;

    includeAll(): any;

    lessThan(key: any, value: any): any;

    lessThanOrEqualTo(key: any, value: any): any;

    limit(n: any): any;

    matches(key: any, regex: any, modifiers: any): any;

    matchesKeyInQuery(key: any, queryKey: any, query: any): any;

    matchesQuery(key: any, query: any): any;

    near(key: any, point: any): any;

    notContainedIn(key: any, value: any): any;

    notEqualTo(key: any, value: any): any;

    polygonContains(key: any, point: any): any;

    select(...args: any[]): any;

    skip(n: any): any;

    sortByTextScore(): any;

    startsWith(key: any, value: any): any;

    subscribe(): any;

    toJSON(): any;

    withJSON(json: any): any;

    withinGeoBox(key: any, southwest: any, northeast: any): any;

    withinKilometers(key: any, point: any, distance: any, sorted: any): any;

    withinMiles(key: any, point: any, distance: any, sorted: any): any;

    withinPolygon(key: any, points: any): any;

    withinRadians(key: any, point: any, distance: any, sorted: any): any;

    static and(...args: any[]): any;

    static fromJSON(className: any, json: any): any;

    static nor(...args: any[]): any;

    static or(...args: any[]): any;

}

export class Relation {
    constructor(parent: any, key: any);

    add(objects: any): any;

    query(): any;

    remove(objects: any): void;

    toJSON(): any;

}

export class Role {
    constructor(name: any, acl: any);

    getName(): any;

    getRoles(): any;

    getUsers(): any;

    setName(name: any, options: any): any;

    validate(attrs: any, options: any): any;

    static className: string;

    static createWithoutData(id: any): any;

    static destroyAll(list: any, ...args: any[]): any;

    static disableSingleInstance(): void;

    static enableSingleInstance(): void;

    static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

    static fetchAll(list: any, ...args: any[]): any;

    static fetchAllIfNeeded(list: any, options: any): any;

    static fetchAllWithInclude(list: any, keys: any, options: any): any;

    static fromJSON(json: any, override: any): any;

    static registerSubclass(className: any, constructor: any): void;

    static saveAll(list: any, ...args: any[]): any;

}

export class Schema {
    constructor(className: any);

    addArray(name: any): any;

    addBoolean(name: any): any;

    addDate(name: any): any;

    addField(name: any, type: any): any;

    addFile(name: any): any;

    addGeoPoint(name: any): any;

    addIndex(name: any, index: any): any;

    addNumber(name: any): any;

    addObject(name: any): any;

    addPointer(name: any, targetClass: any): any;

    addPolygon(name: any): any;

    addRelation(name: any, targetClass: any): any;

    addString(name: any): any;

    assertClassName(): void;

    delete(options: any): any;

    deleteField(name: any): void;

    deleteIndex(name: any): void;

    get(options: any): any;

    purge(): any;

    save(options: any): any;

    update(options: any): any;

    static all(options: any): any;

}

export class Session {
    constructor(attributes: any);

    getSessionToken(): any;

    static className: string;

    static createWithoutData(id: any): any;

    static current(options: any): any;

    static destroyAll(list: any, ...args: any[]): any;

    static disableSingleInstance(): void;

    static enableSingleInstance(): void;

    static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

    static fetchAll(list: any, ...args: any[]): any;

    static fetchAllIfNeeded(list: any, options: any): any;

    static fetchAllWithInclude(list: any, keys: any, options: any): any;

    static fromJSON(json: any, override: any): any;

    static isCurrentSessionRevocable(): any;

    static readOnlyAttributes(): any;

    static registerSubclass(className: any, constructor: any): void;

    static saveAll(list: any, ...args: any[]): any;

}

export class User {
    constructor(attributes: any);

    authenticated(): any;

    destroy(...args: any[]): any;

    fetch(...args: any[]): any;

    fetchWithInclude(...args: any[]): any;

    getEmail(): any;

    getSessionToken(): any;

    getUsername(): any;

    isCurrent(): any;

    logIn(options: any): any;

    save(...args: any[]): any;

    setEmail(email: any): any;

    setPassword(password: any): void;

    setUsername(username: any): void;

    signUp(attrs: any, options: any): any;

    static allowCustomUserClass(isAllowed: any): void;

    static become(sessionToken: any, options: any): any;

    static className: string;

    static createWithoutData(id: any): any;

    static current(): any;

    static currentAsync(): any;

    static destroyAll(list: any, ...args: any[]): any;

    static disableSingleInstance(): void;

    static disableUnsafeCurrentUser(): void;

    static enableRevocableSession(options: any): any;

    static enableSingleInstance(): void;

    static enableUnsafeCurrentUser(): void;

    static extend(protoProps: any, classProps: any): any;

    static fetchAll(list: any, ...args: any[]): any;

    static fetchAllIfNeeded(list: any, options: any): any;

    static fetchAllWithInclude(list: any, keys: any, options: any): any;

    static fromJSON(json: any, override: any): any;

    static logIn(username: any, password: any, options: any): any;

    static logInWith(provider: any, options: any): any;

    static logOut(): any;

    static readOnlyAttributes(): any;

    static registerSubclass(className: any, constructor: any): void;

    static requestPasswordReset(email: any, options: any): any;

    static saveAll(list: any, ...args: any[]): any;

    static signUp(username: any, password: any, attrs: any, options: any): any;

}

export const applicationId: any;

export const javaScriptKey: any;

export const liveQueryServerURL: any;

export const masterKey: any;

export const serverURL: string;

export function Installation(attributes: any): any;

export function initialize(applicationId: any, javaScriptKey: any): void;

export function setAsyncStorage(storage: any): void;

export namespace Analytics {
    function track(name: any, dimensions: any): any;

}

export namespace Cloud {
    function getJobStatus(jobStatusId: any): any;

    function getJobsData(): any;

    function run(name: any, data: any, options: any): any;

    function startJob(name: any, data: any): any;

}

export namespace CoreManager {
    function get(key: any): any;

    function getAnalyticsController(): any;

    function getAsyncStorage(): any;

    function getCloudController(): any;

    function getConfigController(): any;

    function getFileController(): any;

    function getHooksController(): any;

    function getInstallationController(): any;

    function getLiveQueryController(): any;

    function getObjectController(): any;

    function getObjectStateController(): any;

    function getPushController(): any;

    function getQueryController(): any;

    function getRESTController(): any;

    function getSchemaController(): any;

    function getSessionController(): any;

    function getStorageController(): any;

    function getUserController(): any;

    function set(key: any, value: any): void;

    function setAnalyticsController(controller: any): void;

    function setAsyncStorage(storage: any): void;

    function setCloudController(controller: any): void;

    function setConfigController(controller: any): void;

    function setFileController(controller: any): void;

    function setHooksController(controller: any): void;

    function setInstallationController(controller: any): void;

    function setLiveQueryController(controller: any): void;

    function setObjectController(controller: any): void;

    function setObjectStateController(controller: any): void;

    function setPushController(controller: any): void;

    function setQueryController(controller: any): void;

    function setRESTController(controller: any): void;

    function setSchemaController(controller: any): void;

    function setSessionController(controller: any): void;

    function setStorageController(controller: any): void;

    function setUserController(controller: any): void;

}

export namespace FacebookUtils {
    function init(options: any): void;

    function isLinked(user: any): any;

    function link(user: any, permissions: any, options: any): any;

    function logIn(permissions: any, options: any): any;

    function unlink(user: any, options: any): any;

}

export namespace Installation {
    const className: string;

    function createWithoutData(id: any): any;

    function destroyAll(list: any, ...args: any[]): any;

    function disableSingleInstance(): void;

    function enableSingleInstance(): void;

    function extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

    function fetchAll(list: any, ...args: any[]): any;

    function fetchAllIfNeeded(list: any, options: any): any;

    function fetchAllWithInclude(list: any, keys: any, options: any): any;

    function fromJSON(json: any, override: any): any;

    function registerSubclass(className: any, constructor: any): void;

    function saveAll(list: any, ...args: any[]): any;

}

export namespace LiveQuery {
    function addListener(type: any, listener: any): any;

    function close(): void;

    function emit(type: any, args: any): any;

    function eventNames(): any;

    function getMaxListeners(): any;

    function listenerCount(type: any): any;

    function listeners(type: any): any;

    function off(type: any, listener: any): any;

    function on(type: any, listener: any): any;

    function once(type: any, listener: any): any;

    function open(): void;

    function prependListener(type: any, listener: any): any;

    function prependOnceListener(type: any, listener: any): any;

    function rawListeners(type: any): any;

    function removeAllListeners(type: any, ...args: any[]): any;

    function removeListener(type: any, listener: any): any;

    function setMaxListeners(n: any): any;

}

export namespace LiveQueryClient {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

export namespace Op {
    class Add {
        constructor(value: any);

        applyTo(value: any): any;

        mergeWith(previous: any): any;

        toJSON(): any;

    }

    class AddUnique {
        constructor(value: any);

        applyTo(value: any): any;

        mergeWith(previous: any): any;

        toJSON(): any;

    }

    class Increment {
        constructor(amount: any);

        applyTo(value: any): any;

        mergeWith(previous: any): any;

        toJSON(): any;

    }

    class Relation {
        constructor(adds: any, removes: any);

        applyTo(value: any, object: any, key: any): any;

        mergeWith(previous: any): any;

        toJSON(): any;

    }

    class Remove {
        constructor(value: any);

        applyTo(value: any): any;

        mergeWith(previous: any): any;

        toJSON(): any;

    }

    class Set {
        constructor(value: any);

        applyTo(): any;

        mergeWith(): any;

        toJSON(): any;

    }

    class Unset {
        constructor(...args: any[]);

        applyTo(): any;

        mergeWith(): any;

        toJSON(): any;

    }

}

export namespace Parse {
    class ACL {
        constructor(arg1: any);

        equals(other: any): any;

        getPublicReadAccess(): any;

        getPublicWriteAccess(): any;

        getReadAccess(userId: any): any;

        getRoleReadAccess(role: any): any;

        getRoleWriteAccess(role: any): any;

        getWriteAccess(userId: any): any;

        setPublicReadAccess(allowed: any): void;

        setPublicWriteAccess(allowed: any): void;

        setReadAccess(userId: any, allowed: any): void;

        setRoleReadAccess(role: any, allowed: any): void;

        setRoleWriteAccess(role: any, allowed: any): void;

        setWriteAccess(userId: any, allowed: any): void;

        toJSON(): any;

    }

    class Config {
        constructor();

        escape(attr: any): any;

        get(attr: any): any;

        static current(): any;

        static get(): any;

    }

    class Error {
        constructor(code: any, message: any);

        toString(): any;

        static ACCOUNT_ALREADY_LINKED: number;

        static AGGREGATE_ERROR: number;

        static CACHE_MISS: number;

        static COMMAND_UNAVAILABLE: number;

        static CONNECTION_FAILED: number;

        static DUPLICATE_VALUE: number;

        static EMAIL_MISSING: number;

        static EMAIL_NOT_FOUND: number;

        static EMAIL_TAKEN: number;

        static EXCEEDED_QUOTA: number;

        static FILE_DELETE_ERROR: number;

        static FILE_READ_ERROR: number;

        static FILE_SAVE_ERROR: number;

        static FILE_TOO_LARGE: number;

        static INCORRECT_TYPE: number;

        static INTERNAL_SERVER_ERROR: number;

        static INVALID_ACL: number;

        static INVALID_CHANNEL_NAME: number;

        static INVALID_CLASS_NAME: number;

        static INVALID_CONTENT_LENGTH: number;

        static INVALID_EMAIL_ADDRESS: number;

        static INVALID_EVENT_NAME: number;

        static INVALID_FILE_NAME: number;

        static INVALID_IMAGE_DATA: number;

        static INVALID_JSON: number;

        static INVALID_KEY_NAME: number;

        static INVALID_LINKED_SESSION: number;

        static INVALID_NESTED_KEY: number;

        static INVALID_POINTER: number;

        static INVALID_PUSH_TIME_ERROR: number;

        static INVALID_QUERY: number;

        static INVALID_ROLE_NAME: number;

        static INVALID_SCHEMA_OPERATION: number;

        static INVALID_SESSION_TOKEN: number;

        static LINKED_ID_MISSING: number;

        static MISSING_CONTENT_LENGTH: number;

        static MISSING_CONTENT_TYPE: number;

        static MISSING_OBJECT_ID: number;

        static MUST_CREATE_USER_THROUGH_SIGNUP: number;

        static NOT_INITIALIZED: number;

        static OBJECT_NOT_FOUND: number;

        static OBJECT_TOO_LARGE: number;

        static OPERATION_FORBIDDEN: number;

        static OTHER_CAUSE: number;

        static PASSWORD_MISSING: number;

        static PUSH_MISCONFIGURED: number;

        static REQUEST_LIMIT_EXCEEDED: number;

        static SCRIPT_FAILED: number;

        static SESSION_MISSING: number;

        static TIMEOUT: number;

        static UNSAVED_FILE_ERROR: number;

        static UNSUPPORTED_SERVICE: number;

        static USERNAME_MISSING: number;

        static USERNAME_TAKEN: number;

        static VALIDATION_ERROR: number;

        static X_DOMAIN_REQUEST: number;

        static captureStackTrace(p0: any, p1: any): any;

        static stackTraceLimit: number;

    }

    class File {
        constructor(name: any, data: any, type: any);

        equals(other: any): any;

        name(): any;

        save(options: any): any;

        toJSON(): any;

        url(options: any): any;

        static encodeBase64(bytes: any): any;

        static fromJSON(obj: any): any;

    }

    class GeoPoint {
        constructor(arg1: any, arg2: any);

        equals(other: any): any;

        kilometersTo(point: any): any;

        milesTo(point: any): any;

        radiansTo(point: any): any;

        toJSON(): any;

        static current(): any;

    }

    class LiveQueryClient {
        constructor(_ref: any);

        close(): void;

        open(): void;

        resubscribe(): void;

        shouldOpen(): any;

        subscribe(query: any, sessionToken: any): any;

        unsubscribe(subscription: any): void;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

    class Object {
        constructor(className: any, attributes: any, options: any, ...args: any[]);

        add(attr: any, item: any): any;

        addAll(attr: any, items: any): any;

        addAllUnique(attr: any, items: any): any;

        addUnique(attr: any, item: any): any;

        clear(): any;

        clone(): any;

        destroy(options: any): any;

        dirty(attr: any): any;

        dirtyKeys(): any;

        equals(other: any): any;

        escape(attr: any): any;

        existed(): any;

        fetch(options: any): any;

        fetchWithInclude(keys: any, options: any): any;

        get(attr: any): any;

        getACL(): any;

        has(attr: any): any;

        increment(attr: any, amount: any): any;

        initialize(): void;

        isNew(): any;

        isValid(): any;

        newInstance(): any;

        op(attr: any): any;

        relation(attr: any): any;

        remove(attr: any, item: any): any;

        removeAll(attr: any, items: any): any;

        revert(): void;

        save(arg1: any, arg2: any, arg3: any): any;

        set(key: any, value: any, options: any): any;

        setACL(acl: any, options: any): any;

        toJSON(seen: any): any;

        toPointer(): any;

        unset(attr: any, options: any): any;

        validate(attrs: any): any;

        static createWithoutData(id: any): any;

        static destroyAll(list: any, ...args: any[]): any;

        static disableSingleInstance(): void;

        static enableSingleInstance(): void;

        static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

        static fetchAll(list: any, ...args: any[]): any;

        static fetchAllIfNeeded(list: any, options: any): any;

        static fetchAllWithInclude(list: any, keys: any, options: any): any;

        static fromJSON(json: any, override: any): any;

        static registerSubclass(className: any, constructor: any): void;

        static saveAll(list: any, ...args: any[]): any;

    }

    class Polygon {
        constructor(arg1: any);

        containsPoint(point: any): any;

        equals(other: any): any;

        toJSON(): any;

    }

    class Query {
        constructor(objectClass: any);

        addAscending(...args: any[]): any;

        addDescending(...args: any[]): any;

        aggregate(pipeline: any, options: any): any;

        ascending(...args: any[]): any;

        containedBy(key: any, value: any): any;

        containedIn(key: any, value: any): any;

        contains(key: any, value: any): any;

        containsAll(key: any, values: any): any;

        containsAllStartingWith(key: any, values: any): any;

        count(options: any): any;

        descending(...args: any[]): any;

        distinct(key: any, options: any): any;

        doesNotExist(key: any): any;

        doesNotMatchKeyInQuery(key: any, queryKey: any, query: any): any;

        doesNotMatchQuery(key: any, query: any): any;

        each(callback: any, options: any): any;

        endsWith(key: any, value: any): any;

        equalTo(key: any, value: any): any;

        exists(key: any): any;

        find(options: any): any;

        first(options: any): any;

        fullText(key: any, value: any, options: any): any;

        get(objectId: any, options: any): any;

        greaterThan(key: any, value: any): any;

        greaterThanOrEqualTo(key: any, value: any): any;

        include(...args: any[]): any;

        includeAll(): any;

        lessThan(key: any, value: any): any;

        lessThanOrEqualTo(key: any, value: any): any;

        limit(n: any): any;

        matches(key: any, regex: any, modifiers: any): any;

        matchesKeyInQuery(key: any, queryKey: any, query: any): any;

        matchesQuery(key: any, query: any): any;

        near(key: any, point: any): any;

        notContainedIn(key: any, value: any): any;

        notEqualTo(key: any, value: any): any;

        polygonContains(key: any, point: any): any;

        select(...args: any[]): any;

        skip(n: any): any;

        sortByTextScore(): any;

        startsWith(key: any, value: any): any;

        subscribe(): any;

        toJSON(): any;

        withJSON(json: any): any;

        withinGeoBox(key: any, southwest: any, northeast: any): any;

        withinKilometers(key: any, point: any, distance: any, sorted: any): any;

        withinMiles(key: any, point: any, distance: any, sorted: any): any;

        withinPolygon(key: any, points: any): any;

        withinRadians(key: any, point: any, distance: any, sorted: any): any;

        static and(...args: any[]): any;

        static fromJSON(className: any, json: any): any;

        static nor(...args: any[]): any;

        static or(...args: any[]): any;

    }

    class Relation {
        constructor(parent: any, key: any);

        add(objects: any): any;

        query(): any;

        remove(objects: any): void;

        toJSON(): any;

    }

    class Role {
        constructor(name: any, acl: any);

        getName(): any;

        getRoles(): any;

        getUsers(): any;

        setName(name: any, options: any): any;

        validate(attrs: any, options: any): any;

        static className: string;

        static createWithoutData(id: any): any;

        static destroyAll(list: any, ...args: any[]): any;

        static disableSingleInstance(): void;

        static enableSingleInstance(): void;

        static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

        static fetchAll(list: any, ...args: any[]): any;

        static fetchAllIfNeeded(list: any, options: any): any;

        static fetchAllWithInclude(list: any, keys: any, options: any): any;

        static fromJSON(json: any, override: any): any;

        static registerSubclass(className: any, constructor: any): void;

        static saveAll(list: any, ...args: any[]): any;

    }

    class Schema {
        constructor(className: any);

        addArray(name: any): any;

        addBoolean(name: any): any;

        addDate(name: any): any;

        addField(name: any, type: any): any;

        addFile(name: any): any;

        addGeoPoint(name: any): any;

        addIndex(name: any, index: any): any;

        addNumber(name: any): any;

        addObject(name: any): any;

        addPointer(name: any, targetClass: any): any;

        addPolygon(name: any): any;

        addRelation(name: any, targetClass: any): any;

        addString(name: any): any;

        assertClassName(): void;

        delete(options: any): any;

        deleteField(name: any): void;

        deleteIndex(name: any): void;

        get(options: any): any;

        purge(): any;

        save(options: any): any;

        update(options: any): any;

        static all(options: any): any;

    }

    class Session {
        constructor(attributes: any);

        getSessionToken(): any;

        static className: string;

        static createWithoutData(id: any): any;

        static current(options: any): any;

        static destroyAll(list: any, ...args: any[]): any;

        static disableSingleInstance(): void;

        static enableSingleInstance(): void;

        static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

        static fetchAll(list: any, ...args: any[]): any;

        static fetchAllIfNeeded(list: any, options: any): any;

        static fetchAllWithInclude(list: any, keys: any, options: any): any;

        static fromJSON(json: any, override: any): any;

        static isCurrentSessionRevocable(): any;

        static readOnlyAttributes(): any;

        static registerSubclass(className: any, constructor: any): void;

        static saveAll(list: any, ...args: any[]): any;

    }

    class User {
        constructor(attributes: any);

        authenticated(): any;

        destroy(...args: any[]): any;

        fetch(...args: any[]): any;

        fetchWithInclude(...args: any[]): any;

        getEmail(): any;

        getSessionToken(): any;

        getUsername(): any;

        isCurrent(): any;

        logIn(options: any): any;

        save(...args: any[]): any;

        setEmail(email: any): any;

        setPassword(password: any): void;

        setUsername(username: any): void;

        signUp(attrs: any, options: any): any;

        static allowCustomUserClass(isAllowed: any): void;

        static become(sessionToken: any, options: any): any;

        static className: string;

        static createWithoutData(id: any): any;

        static current(): any;

        static currentAsync(): any;

        static destroyAll(list: any, ...args: any[]): any;

        static disableSingleInstance(): void;

        static disableUnsafeCurrentUser(): void;

        static enableRevocableSession(options: any): any;

        static enableSingleInstance(): void;

        static enableUnsafeCurrentUser(): void;

        static extend(protoProps: any, classProps: any): any;

        static fetchAll(list: any, ...args: any[]): any;

        static fetchAllIfNeeded(list: any, options: any): any;

        static fetchAllWithInclude(list: any, keys: any, options: any): any;

        static fromJSON(json: any, override: any): any;

        static logIn(username: any, password: any, options: any): any;

        static logInWith(provider: any, options: any): any;

        static logOut(): any;

        static readOnlyAttributes(): any;

        static registerSubclass(className: any, constructor: any): void;

        static requestPasswordReset(email: any, options: any): any;

        static saveAll(list: any, ...args: any[]): any;

        static signUp(username: any, password: any, attrs: any, options: any): any;

    }

    const applicationId: any;

    const javaScriptKey: any;

    const liveQueryServerURL: any;

    const masterKey: any;

    const serverURL: string;

    function Installation(attributes: any): any;

    function initialize(applicationId: any, javaScriptKey: any): void;

    function setAsyncStorage(storage: any): void;

    namespace Analytics {
        function track(name: any, dimensions: any): any;

    }

    namespace Cloud {
        function getJobStatus(jobStatusId: any): any;

        function getJobsData(): any;

        function run(name: any, data: any, options: any): any;

        function startJob(name: any, data: any): any;

    }

    namespace CoreManager {
        function get(key: any): any;

        function getAnalyticsController(): any;

        function getAsyncStorage(): any;

        function getCloudController(): any;

        function getConfigController(): any;

        function getFileController(): any;

        function getHooksController(): any;

        function getInstallationController(): any;

        function getLiveQueryController(): any;

        function getObjectController(): any;

        function getObjectStateController(): any;

        function getPushController(): any;

        function getQueryController(): any;

        function getRESTController(): any;

        function getSchemaController(): any;

        function getSessionController(): any;

        function getStorageController(): any;

        function getUserController(): any;

        function set(key: any, value: any): void;

        function setAnalyticsController(controller: any): void;

        function setAsyncStorage(storage: any): void;

        function setCloudController(controller: any): void;

        function setConfigController(controller: any): void;

        function setFileController(controller: any): void;

        function setHooksController(controller: any): void;

        function setInstallationController(controller: any): void;

        function setLiveQueryController(controller: any): void;

        function setObjectController(controller: any): void;

        function setObjectStateController(controller: any): void;

        function setPushController(controller: any): void;

        function setQueryController(controller: any): void;

        function setRESTController(controller: any): void;

        function setSchemaController(controller: any): void;

        function setSessionController(controller: any): void;

        function setStorageController(controller: any): void;

        function setUserController(controller: any): void;

    }

    namespace FacebookUtils {
        function init(options: any): void;

        function isLinked(user: any): any;

        function link(user: any, permissions: any, options: any): any;

        function logIn(permissions: any, options: any): any;

        function unlink(user: any, options: any): any;

    }

    namespace Installation {
        const className: string;

        function createWithoutData(id: any): any;

        function destroyAll(list: any, ...args: any[]): any;

        function disableSingleInstance(): void;

        function enableSingleInstance(): void;

        function extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

        function fetchAll(list: any, ...args: any[]): any;

        function fetchAllIfNeeded(list: any, options: any): any;

        function fetchAllWithInclude(list: any, keys: any, options: any): any;

        function fromJSON(json: any, override: any): any;

        function registerSubclass(className: any, constructor: any): void;

        function saveAll(list: any, ...args: any[]): any;

    }

    namespace LiveQuery {
        function addListener(type: any, listener: any): any;

        function close(): void;

        function emit(type: any, args: any): any;

        function eventNames(): any;

        function getMaxListeners(): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function off(type: any, listener: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function open(): void;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function setMaxListeners(n: any): any;

    }

    namespace LiveQueryClient {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Op {
        class Add {
            constructor(value: any);

            applyTo(value: any): any;

            mergeWith(previous: any): any;

            toJSON(): any;

        }

        class AddUnique {
            constructor(value: any);

            applyTo(value: any): any;

            mergeWith(previous: any): any;

            toJSON(): any;

        }

        class Increment {
            constructor(amount: any);

            applyTo(value: any): any;

            mergeWith(previous: any): any;

            toJSON(): any;

        }

        class Relation {
            constructor(adds: any, removes: any);

            applyTo(value: any, object: any, key: any): any;

            mergeWith(previous: any): any;

            toJSON(): any;

        }

        class Remove {
            constructor(value: any);

            applyTo(value: any): any;

            mergeWith(previous: any): any;

            toJSON(): any;

        }

        class Set {
            constructor(value: any);

            applyTo(): any;

            mergeWith(): any;

            toJSON(): any;

        }

        class Unset {
            constructor(...args: any[]);

            applyTo(): any;

            mergeWith(): any;

            toJSON(): any;

        }

    }

    namespace Parse {
        class ACL {
            constructor(arg1: any);

            equals(other: any): any;

            getPublicReadAccess(): any;

            getPublicWriteAccess(): any;

            getReadAccess(userId: any): any;

            getRoleReadAccess(role: any): any;

            getRoleWriteAccess(role: any): any;

            getWriteAccess(userId: any): any;

            setPublicReadAccess(allowed: any): void;

            setPublicWriteAccess(allowed: any): void;

            setReadAccess(userId: any, allowed: any): void;

            setRoleReadAccess(role: any, allowed: any): void;

            setRoleWriteAccess(role: any, allowed: any): void;

            setWriteAccess(userId: any, allowed: any): void;

            toJSON(): any;

        }

        class Config {
            constructor();

            escape(attr: any): any;

            get(attr: any): any;

            static current(): any;

            static get(): any;

        }

        class Error {
            constructor(code: any, message: any);

            toString(): any;

            static ACCOUNT_ALREADY_LINKED: number;

            static AGGREGATE_ERROR: number;

            static CACHE_MISS: number;

            static COMMAND_UNAVAILABLE: number;

            static CONNECTION_FAILED: number;

            static DUPLICATE_VALUE: number;

            static EMAIL_MISSING: number;

            static EMAIL_NOT_FOUND: number;

            static EMAIL_TAKEN: number;

            static EXCEEDED_QUOTA: number;

            static FILE_DELETE_ERROR: number;

            static FILE_READ_ERROR: number;

            static FILE_SAVE_ERROR: number;

            static FILE_TOO_LARGE: number;

            static INCORRECT_TYPE: number;

            static INTERNAL_SERVER_ERROR: number;

            static INVALID_ACL: number;

            static INVALID_CHANNEL_NAME: number;

            static INVALID_CLASS_NAME: number;

            static INVALID_CONTENT_LENGTH: number;

            static INVALID_EMAIL_ADDRESS: number;

            static INVALID_EVENT_NAME: number;

            static INVALID_FILE_NAME: number;

            static INVALID_IMAGE_DATA: number;

            static INVALID_JSON: number;

            static INVALID_KEY_NAME: number;

            static INVALID_LINKED_SESSION: number;

            static INVALID_NESTED_KEY: number;

            static INVALID_POINTER: number;

            static INVALID_PUSH_TIME_ERROR: number;

            static INVALID_QUERY: number;

            static INVALID_ROLE_NAME: number;

            static INVALID_SCHEMA_OPERATION: number;

            static INVALID_SESSION_TOKEN: number;

            static LINKED_ID_MISSING: number;

            static MISSING_CONTENT_LENGTH: number;

            static MISSING_CONTENT_TYPE: number;

            static MISSING_OBJECT_ID: number;

            static MUST_CREATE_USER_THROUGH_SIGNUP: number;

            static NOT_INITIALIZED: number;

            static OBJECT_NOT_FOUND: number;

            static OBJECT_TOO_LARGE: number;

            static OPERATION_FORBIDDEN: number;

            static OTHER_CAUSE: number;

            static PASSWORD_MISSING: number;

            static PUSH_MISCONFIGURED: number;

            static REQUEST_LIMIT_EXCEEDED: number;

            static SCRIPT_FAILED: number;

            static SESSION_MISSING: number;

            static TIMEOUT: number;

            static UNSAVED_FILE_ERROR: number;

            static UNSUPPORTED_SERVICE: number;

            static USERNAME_MISSING: number;

            static USERNAME_TAKEN: number;

            static VALIDATION_ERROR: number;

            static X_DOMAIN_REQUEST: number;

            static captureStackTrace(p0: any, p1: any): any;

            static stackTraceLimit: number;

        }

        class File {
            constructor(name: any, data: any, type: any);

            equals(other: any): any;

            name(): any;

            save(options: any): any;

            toJSON(): any;

            url(options: any): any;

            static encodeBase64(bytes: any): any;

            static fromJSON(obj: any): any;

        }

        class GeoPoint {
            constructor(arg1: any, arg2: any);

            equals(other: any): any;

            kilometersTo(point: any): any;

            milesTo(point: any): any;

            radiansTo(point: any): any;

            toJSON(): any;

            static current(): any;

        }

        class LiveQueryClient {
            constructor(_ref: any);

            close(): void;

            open(): void;

            resubscribe(): void;

            shouldOpen(): any;

            subscribe(query: any, sessionToken: any): any;

            unsubscribe(subscription: any): void;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static usingDomains: boolean;

        }

        class Object {
            constructor(className: any, attributes: any, options: any, ...args: any[]);

            add(attr: any, item: any): any;

            addAll(attr: any, items: any): any;

            addAllUnique(attr: any, items: any): any;

            addUnique(attr: any, item: any): any;

            clear(): any;

            clone(): any;

            destroy(options: any): any;

            dirty(attr: any): any;

            dirtyKeys(): any;

            equals(other: any): any;

            escape(attr: any): any;

            existed(): any;

            fetch(options: any): any;

            fetchWithInclude(keys: any, options: any): any;

            get(attr: any): any;

            getACL(): any;

            has(attr: any): any;

            increment(attr: any, amount: any): any;

            initialize(): void;

            isNew(): any;

            isValid(): any;

            newInstance(): any;

            op(attr: any): any;

            relation(attr: any): any;

            remove(attr: any, item: any): any;

            removeAll(attr: any, items: any): any;

            revert(): void;

            save(arg1: any, arg2: any, arg3: any): any;

            set(key: any, value: any, options: any): any;

            setACL(acl: any, options: any): any;

            toJSON(seen: any): any;

            toPointer(): any;

            unset(attr: any, options: any): any;

            validate(attrs: any): any;

            static createWithoutData(id: any): any;

            static destroyAll(list: any, ...args: any[]): any;

            static disableSingleInstance(): void;

            static enableSingleInstance(): void;

            static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

            static fetchAll(list: any, ...args: any[]): any;

            static fetchAllIfNeeded(list: any, options: any): any;

            static fetchAllWithInclude(list: any, keys: any, options: any): any;

            static fromJSON(json: any, override: any): any;

            static registerSubclass(className: any, constructor: any): void;

            static saveAll(list: any, ...args: any[]): any;

        }

        class Polygon {
            constructor(arg1: any);

            containsPoint(point: any): any;

            equals(other: any): any;

            toJSON(): any;

        }

        class Query {
            constructor(objectClass: any);

            addAscending(...args: any[]): any;

            addDescending(...args: any[]): any;

            aggregate(pipeline: any, options: any): any;

            ascending(...args: any[]): any;

            containedBy(key: any, value: any): any;

            containedIn(key: any, value: any): any;

            contains(key: any, value: any): any;

            containsAll(key: any, values: any): any;

            containsAllStartingWith(key: any, values: any): any;

            count(options: any): any;

            descending(...args: any[]): any;

            distinct(key: any, options: any): any;

            doesNotExist(key: any): any;

            doesNotMatchKeyInQuery(key: any, queryKey: any, query: any): any;

            doesNotMatchQuery(key: any, query: any): any;

            each(callback: any, options: any): any;

            endsWith(key: any, value: any): any;

            equalTo(key: any, value: any): any;

            exists(key: any): any;

            find(options: any): any;

            first(options: any): any;

            fullText(key: any, value: any, options: any): any;

            get(objectId: any, options: any): any;

            greaterThan(key: any, value: any): any;

            greaterThanOrEqualTo(key: any, value: any): any;

            include(...args: any[]): any;

            includeAll(): any;

            lessThan(key: any, value: any): any;

            lessThanOrEqualTo(key: any, value: any): any;

            limit(n: any): any;

            matches(key: any, regex: any, modifiers: any): any;

            matchesKeyInQuery(key: any, queryKey: any, query: any): any;

            matchesQuery(key: any, query: any): any;

            near(key: any, point: any): any;

            notContainedIn(key: any, value: any): any;

            notEqualTo(key: any, value: any): any;

            polygonContains(key: any, point: any): any;

            select(...args: any[]): any;

            skip(n: any): any;

            sortByTextScore(): any;

            startsWith(key: any, value: any): any;

            subscribe(): any;

            toJSON(): any;

            withJSON(json: any): any;

            withinGeoBox(key: any, southwest: any, northeast: any): any;

            withinKilometers(key: any, point: any, distance: any, sorted: any): any;

            withinMiles(key: any, point: any, distance: any, sorted: any): any;

            withinPolygon(key: any, points: any): any;

            withinRadians(key: any, point: any, distance: any, sorted: any): any;

            static and(...args: any[]): any;

            static fromJSON(className: any, json: any): any;

            static nor(...args: any[]): any;

            static or(...args: any[]): any;

        }

        class Relation {
            constructor(parent: any, key: any);

            add(objects: any): any;

            query(): any;

            remove(objects: any): void;

            toJSON(): any;

        }

        class Role {
            constructor(name: any, acl: any);

            getName(): any;

            getRoles(): any;

            getUsers(): any;

            setName(name: any, options: any): any;

            validate(attrs: any, options: any): any;

            static className: string;

            static createWithoutData(id: any): any;

            static destroyAll(list: any, ...args: any[]): any;

            static disableSingleInstance(): void;

            static enableSingleInstance(): void;

            static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

            static fetchAll(list: any, ...args: any[]): any;

            static fetchAllIfNeeded(list: any, options: any): any;

            static fetchAllWithInclude(list: any, keys: any, options: any): any;

            static fromJSON(json: any, override: any): any;

            static registerSubclass(className: any, constructor: any): void;

            static saveAll(list: any, ...args: any[]): any;

        }

        class Schema {
            constructor(className: any);

            addArray(name: any): any;

            addBoolean(name: any): any;

            addDate(name: any): any;

            addField(name: any, type: any): any;

            addFile(name: any): any;

            addGeoPoint(name: any): any;

            addIndex(name: any, index: any): any;

            addNumber(name: any): any;

            addObject(name: any): any;

            addPointer(name: any, targetClass: any): any;

            addPolygon(name: any): any;

            addRelation(name: any, targetClass: any): any;

            addString(name: any): any;

            assertClassName(): void;

            delete(options: any): any;

            deleteField(name: any): void;

            deleteIndex(name: any): void;

            get(options: any): any;

            purge(): any;

            save(options: any): any;

            update(options: any): any;

            static all(options: any): any;

        }

        class Session {
            constructor(attributes: any);

            getSessionToken(): any;

            static className: string;

            static createWithoutData(id: any): any;

            static current(options: any): any;

            static destroyAll(list: any, ...args: any[]): any;

            static disableSingleInstance(): void;

            static enableSingleInstance(): void;

            static extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

            static fetchAll(list: any, ...args: any[]): any;

            static fetchAllIfNeeded(list: any, options: any): any;

            static fetchAllWithInclude(list: any, keys: any, options: any): any;

            static fromJSON(json: any, override: any): any;

            static isCurrentSessionRevocable(): any;

            static readOnlyAttributes(): any;

            static registerSubclass(className: any, constructor: any): void;

            static saveAll(list: any, ...args: any[]): any;

        }

        class User {
            constructor(attributes: any);

            authenticated(): any;

            destroy(...args: any[]): any;

            fetch(...args: any[]): any;

            fetchWithInclude(...args: any[]): any;

            getEmail(): any;

            getSessionToken(): any;

            getUsername(): any;

            isCurrent(): any;

            logIn(options: any): any;

            save(...args: any[]): any;

            setEmail(email: any): any;

            setPassword(password: any): void;

            setUsername(username: any): void;

            signUp(attrs: any, options: any): any;

            static allowCustomUserClass(isAllowed: any): void;

            static become(sessionToken: any, options: any): any;

            static className: string;

            static createWithoutData(id: any): any;

            static current(): any;

            static currentAsync(): any;

            static destroyAll(list: any, ...args: any[]): any;

            static disableSingleInstance(): void;

            static disableUnsafeCurrentUser(): void;

            static enableRevocableSession(options: any): any;

            static enableSingleInstance(): void;

            static enableUnsafeCurrentUser(): void;

            static extend(protoProps: any, classProps: any): any;

            static fetchAll(list: any, ...args: any[]): any;

            static fetchAllIfNeeded(list: any, options: any): any;

            static fetchAllWithInclude(list: any, keys: any, options: any): any;

            static fromJSON(json: any, override: any): any;

            static logIn(username: any, password: any, options: any): any;

            static logInWith(provider: any, options: any): any;

            static logOut(): any;

            static readOnlyAttributes(): any;

            static registerSubclass(className: any, constructor: any): void;

            static requestPasswordReset(email: any, options: any): any;

            static saveAll(list: any, ...args: any[]): any;

            static signUp(username: any, password: any, attrs: any, options: any): any;

        }

        const applicationId: any;

        const javaScriptKey: any;

        const liveQueryServerURL: any;

        const masterKey: any;

        const serverURL: string;

        function Installation(attributes: any): any;

        function initialize(applicationId: any, javaScriptKey: any): void;

        function setAsyncStorage(storage: any): void;

        namespace Analytics {
            function track(name: any, dimensions: any): any;

        }

        namespace Cloud {
            function getJobStatus(jobStatusId: any): any;

            function getJobsData(): any;

            function run(name: any, data: any, options: any): any;

            function startJob(name: any, data: any): any;

        }

        namespace CoreManager {
            function get(key: any): any;

            function getAnalyticsController(): any;

            function getAsyncStorage(): any;

            function getCloudController(): any;

            function getConfigController(): any;

            function getFileController(): any;

            function getHooksController(): any;

            function getInstallationController(): any;

            function getLiveQueryController(): any;

            function getObjectController(): any;

            function getObjectStateController(): any;

            function getPushController(): any;

            function getQueryController(): any;

            function getRESTController(): any;

            function getSchemaController(): any;

            function getSessionController(): any;

            function getStorageController(): any;

            function getUserController(): any;

            function set(key: any, value: any): void;

            function setAnalyticsController(controller: any): void;

            function setAsyncStorage(storage: any): void;

            function setCloudController(controller: any): void;

            function setConfigController(controller: any): void;

            function setFileController(controller: any): void;

            function setHooksController(controller: any): void;

            function setInstallationController(controller: any): void;

            function setLiveQueryController(controller: any): void;

            function setObjectController(controller: any): void;

            function setObjectStateController(controller: any): void;

            function setPushController(controller: any): void;

            function setQueryController(controller: any): void;

            function setRESTController(controller: any): void;

            function setSchemaController(controller: any): void;

            function setSessionController(controller: any): void;

            function setStorageController(controller: any): void;

            function setUserController(controller: any): void;

        }

        namespace FacebookUtils {
            function init(options: any): void;

            function isLinked(user: any): any;

            function link(user: any, permissions: any, options: any): any;

            function logIn(permissions: any, options: any): any;

            function unlink(user: any, options: any): any;

        }

        namespace Installation {
            const className: string;

            function createWithoutData(id: any): any;

            function destroyAll(list: any, ...args: any[]): any;

            function disableSingleInstance(): void;

            function enableSingleInstance(): void;

            function extend(className: any, protoProps: any, classProps: any, ...args: any[]): any;

            function fetchAll(list: any, ...args: any[]): any;

            function fetchAllIfNeeded(list: any, options: any): any;

            function fetchAllWithInclude(list: any, keys: any, options: any): any;

            function fromJSON(json: any, override: any): any;

            function registerSubclass(className: any, constructor: any): void;

            function saveAll(list: any, ...args: any[]): any;

        }

        namespace LiveQuery {
            function addListener(type: any, listener: any): any;

            function close(): void;

            function emit(type: any, args: any): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function off(type: any, listener: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function open(): void;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function rawListeners(type: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function setMaxListeners(n: any): any;

        }

        namespace LiveQueryClient {
            class EventEmitter {
                constructor();

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static defaultMaxListeners: any;

                static init: any;

                static listenerCount: any;

                static usingDomains: any;

            }

        }

        namespace Op {
            class Add {
                constructor(value: any);

                applyTo(value: any): any;

                mergeWith(previous: any): any;

                toJSON(): any;

            }

            class AddUnique {
                constructor(value: any);

                applyTo(value: any): any;

                mergeWith(previous: any): any;

                toJSON(): any;

            }

            class Increment {
                constructor(amount: any);

                applyTo(value: any): any;

                mergeWith(previous: any): any;

                toJSON(): any;

            }

            class Relation {
                constructor(adds: any, removes: any);

                applyTo(value: any, object: any, key: any): any;

                mergeWith(previous: any): any;

                toJSON(): any;

            }

            class Remove {
                constructor(value: any);

                applyTo(value: any): any;

                mergeWith(previous: any): any;

                toJSON(): any;

            }

            class Set {
                constructor(value: any);

                applyTo(): any;

                mergeWith(): any;

                toJSON(): any;

            }

            class Unset {
                constructor(...args: any[]);

                applyTo(): any;

                mergeWith(): any;

                toJSON(): any;

            }

        }

        namespace Parse {
            class ACL {
                constructor(arg1: any);

                equals(other: any): any;

                getPublicReadAccess(): any;

                getPublicWriteAccess(): any;

                getReadAccess(userId: any): any;

                getRoleReadAccess(role: any): any;

                getRoleWriteAccess(role: any): any;

                getWriteAccess(userId: any): any;

                setPublicReadAccess(allowed: any): void;

                setPublicWriteAccess(allowed: any): void;

                setReadAccess(userId: any, allowed: any): void;

                setRoleReadAccess(role: any, allowed: any): void;

                setRoleWriteAccess(role: any, allowed: any): void;

                setWriteAccess(userId: any, allowed: any): void;

                toJSON(): any;

            }

            class Config {
                constructor();

                escape(attr: any): any;

                get(attr: any): any;

                static current: any;

                static get: any;

            }

            class Error {
                constructor(code: any, message: any);

                toString(): any;

                static ACCOUNT_ALREADY_LINKED: any;

                static AGGREGATE_ERROR: any;

                static CACHE_MISS: any;

                static COMMAND_UNAVAILABLE: any;

                static CONNECTION_FAILED: any;

                static DUPLICATE_VALUE: any;

                static EMAIL_MISSING: any;

                static EMAIL_NOT_FOUND: any;

                static EMAIL_TAKEN: any;

                static EXCEEDED_QUOTA: any;

                static FILE_DELETE_ERROR: any;

                static FILE_READ_ERROR: any;

                static FILE_SAVE_ERROR: any;

                static FILE_TOO_LARGE: any;

                static INCORRECT_TYPE: any;

                static INTERNAL_SERVER_ERROR: any;

                static INVALID_ACL: any;

                static INVALID_CHANNEL_NAME: any;

                static INVALID_CLASS_NAME: any;

                static INVALID_CONTENT_LENGTH: any;

                static INVALID_EMAIL_ADDRESS: any;

                static INVALID_EVENT_NAME: any;

                static INVALID_FILE_NAME: any;

                static INVALID_IMAGE_DATA: any;

                static INVALID_JSON: any;

                static INVALID_KEY_NAME: any;

                static INVALID_LINKED_SESSION: any;

                static INVALID_NESTED_KEY: any;

                static INVALID_POINTER: any;

                static INVALID_PUSH_TIME_ERROR: any;

                static INVALID_QUERY: any;

                static INVALID_ROLE_NAME: any;

                static INVALID_SCHEMA_OPERATION: any;

                static INVALID_SESSION_TOKEN: any;

                static LINKED_ID_MISSING: any;

                static MISSING_CONTENT_LENGTH: any;

                static MISSING_CONTENT_TYPE: any;

                static MISSING_OBJECT_ID: any;

                static MUST_CREATE_USER_THROUGH_SIGNUP: any;

                static NOT_INITIALIZED: any;

                static OBJECT_NOT_FOUND: any;

                static OBJECT_TOO_LARGE: any;

                static OPERATION_FORBIDDEN: any;

                static OTHER_CAUSE: any;

                static PASSWORD_MISSING: any;

                static PUSH_MISCONFIGURED: any;

                static REQUEST_LIMIT_EXCEEDED: any;

                static SCRIPT_FAILED: any;

                static SESSION_MISSING: any;

                static TIMEOUT: any;

                static UNSAVED_FILE_ERROR: any;

                static UNSUPPORTED_SERVICE: any;

                static USERNAME_MISSING: any;

                static USERNAME_TAKEN: any;

                static VALIDATION_ERROR: any;

                static X_DOMAIN_REQUEST: any;

                static captureStackTrace: any;

                static stackTraceLimit: any;

            }

            class File {
                constructor(name: any, data: any, type: any);

                equals(other: any): any;

                name(): any;

                save(options: any): any;

                toJSON(): any;

                url(options: any): any;

                static encodeBase64: any;

                static fromJSON: any;

            }

            class GeoPoint {
                constructor(arg1: any, arg2: any);

                equals(other: any): any;

                kilometersTo(point: any): any;

                milesTo(point: any): any;

                radiansTo(point: any): any;

                toJSON(): any;

                static current: any;

            }

            class LiveQueryClient {
                constructor(_ref: any);

                close(): void;

                open(): void;

                resubscribe(): void;

                shouldOpen(): any;

                subscribe(query: any, sessionToken: any): any;

                unsubscribe(subscription: any): void;

                static EventEmitter: any;

                static defaultMaxListeners: any;

                static init: any;

                static listenerCount: any;

                static usingDomains: any;

            }

            class Object {
                constructor(className: any, attributes: any, options: any, ...args: any[]);

                add(attr: any, item: any): any;

                addAll(attr: any, items: any): any;

                addAllUnique(attr: any, items: any): any;

                addUnique(attr: any, item: any): any;

                clear(): any;

                clone(): any;

                destroy(options: any): any;

                dirty(attr: any): any;

                dirtyKeys(): any;

                equals(other: any): any;

                escape(attr: any): any;

                existed(): any;

                fetch(options: any): any;

                fetchWithInclude(keys: any, options: any): any;

                get(attr: any): any;

                getACL(): any;

                has(attr: any): any;

                increment(attr: any, amount: any): any;

                initialize(): void;

                isNew(): any;

                isValid(): any;

                newInstance(): any;

                op(attr: any): any;

                relation(attr: any): any;

                remove(attr: any, item: any): any;

                removeAll(attr: any, items: any): any;

                revert(): void;

                save(arg1: any, arg2: any, arg3: any): any;

                set(key: any, value: any, options: any): any;

                setACL(acl: any, options: any): any;

                toJSON(seen: any): any;

                toPointer(): any;

                unset(attr: any, options: any): any;

                validate(attrs: any): any;

                static createWithoutData: any;

                static destroyAll: any;

                static disableSingleInstance: any;

                static enableSingleInstance: any;

                static extend: any;

                static fetchAll: any;

                static fetchAllIfNeeded: any;

                static fetchAllWithInclude: any;

                static fromJSON: any;

                static registerSubclass: any;

                static saveAll: any;

            }

            class Polygon {
                constructor(arg1: any);

                containsPoint(point: any): any;

                equals(other: any): any;

                toJSON(): any;

            }

            class Query {
                constructor(objectClass: any);

                addAscending(...args: any[]): any;

                addDescending(...args: any[]): any;

                aggregate(pipeline: any, options: any): any;

                ascending(...args: any[]): any;

                containedBy(key: any, value: any): any;

                containedIn(key: any, value: any): any;

                contains(key: any, value: any): any;

                containsAll(key: any, values: any): any;

                containsAllStartingWith(key: any, values: any): any;

                count(options: any): any;

                descending(...args: any[]): any;

                distinct(key: any, options: any): any;

                doesNotExist(key: any): any;

                doesNotMatchKeyInQuery(key: any, queryKey: any, query: any): any;

                doesNotMatchQuery(key: any, query: any): any;

                each(callback: any, options: any): any;

                endsWith(key: any, value: any): any;

                equalTo(key: any, value: any): any;

                exists(key: any): any;

                find(options: any): any;

                first(options: any): any;

                fullText(key: any, value: any, options: any): any;

                get(objectId: any, options: any): any;

                greaterThan(key: any, value: any): any;

                greaterThanOrEqualTo(key: any, value: any): any;

                include(...args: any[]): any;

                includeAll(): any;

                lessThan(key: any, value: any): any;

                lessThanOrEqualTo(key: any, value: any): any;

                limit(n: any): any;

                matches(key: any, regex: any, modifiers: any): any;

                matchesKeyInQuery(key: any, queryKey: any, query: any): any;

                matchesQuery(key: any, query: any): any;

                near(key: any, point: any): any;

                notContainedIn(key: any, value: any): any;

                notEqualTo(key: any, value: any): any;

                polygonContains(key: any, point: any): any;

                select(...args: any[]): any;

                skip(n: any): any;

                sortByTextScore(): any;

                startsWith(key: any, value: any): any;

                subscribe(): any;

                toJSON(): any;

                withJSON(json: any): any;

                withinGeoBox(key: any, southwest: any, northeast: any): any;

                withinKilometers(key: any, point: any, distance: any, sorted: any): any;

                withinMiles(key: any, point: any, distance: any, sorted: any): any;

                withinPolygon(key: any, points: any): any;

                withinRadians(key: any, point: any, distance: any, sorted: any): any;

                static and: any;

                static fromJSON: any;

                static nor: any;

                static or: any;

            }

            class Relation {
                constructor(parent: any, key: any);

                add(objects: any): any;

                query(): any;

                remove(objects: any): void;

                toJSON(): any;

            }

            class Role {
                constructor(name: any, acl: any);

                getName(): any;

                getRoles(): any;

                getUsers(): any;

                setName(name: any, options: any): any;

                validate(attrs: any, options: any): any;

                static className: any;

                static createWithoutData: any;

                static destroyAll: any;

                static disableSingleInstance: any;

                static enableSingleInstance: any;

                static extend: any;

                static fetchAll: any;

                static fetchAllIfNeeded: any;

                static fetchAllWithInclude: any;

                static fromJSON: any;

                static registerSubclass: any;

                static saveAll: any;

            }

            class Schema {
                constructor(className: any);

                addArray(name: any): any;

                addBoolean(name: any): any;

                addDate(name: any): any;

                addField(name: any, type: any): any;

                addFile(name: any): any;

                addGeoPoint(name: any): any;

                addIndex(name: any, index: any): any;

                addNumber(name: any): any;

                addObject(name: any): any;

                addPointer(name: any, targetClass: any): any;

                addPolygon(name: any): any;

                addRelation(name: any, targetClass: any): any;

                addString(name: any): any;

                assertClassName(): void;

                delete(options: any): any;

                deleteField(name: any): void;

                deleteIndex(name: any): void;

                get(options: any): any;

                purge(): any;

                save(options: any): any;

                update(options: any): any;

                static all: any;

            }

            class Session {
                constructor(attributes: any);

                getSessionToken(): any;

                static className: any;

                static createWithoutData: any;

                static current: any;

                static destroyAll: any;

                static disableSingleInstance: any;

                static enableSingleInstance: any;

                static extend: any;

                static fetchAll: any;

                static fetchAllIfNeeded: any;

                static fetchAllWithInclude: any;

                static fromJSON: any;

                static isCurrentSessionRevocable: any;

                static readOnlyAttributes: any;

                static registerSubclass: any;

                static saveAll: any;

            }

            class User {
                constructor(attributes: any);

                authenticated(): any;

                destroy(...args: any[]): any;

                fetch(...args: any[]): any;

                fetchWithInclude(...args: any[]): any;

                getEmail(): any;

                getSessionToken(): any;

                getUsername(): any;

                isCurrent(): any;

                logIn(options: any): any;

                save(...args: any[]): any;

                setEmail(email: any): any;

                setPassword(password: any): void;

                setUsername(username: any): void;

                signUp(attrs: any, options: any): any;

                static allowCustomUserClass: any;

                static become: any;

                static className: any;

                static createWithoutData: any;

                static current: any;

                static currentAsync: any;

                static destroyAll: any;

                static disableSingleInstance: any;

                static disableUnsafeCurrentUser: any;

                static enableRevocableSession: any;

                static enableSingleInstance: any;

                static enableUnsafeCurrentUser: any;

                static extend: any;

                static fetchAll: any;

                static fetchAllIfNeeded: any;

                static fetchAllWithInclude: any;

                static fromJSON: any;

                static logIn: any;

                static logInWith: any;

                static logOut: any;

                static readOnlyAttributes: any;

                static registerSubclass: any;

                static requestPasswordReset: any;

                static saveAll: any;

                static signUp: any;

            }

            const applicationId: any;

            const javaScriptKey: any;

            const liveQueryServerURL: any;

            const masterKey: any;

            const serverURL: string;

            function Installation(attributes: any): any;

            function initialize(applicationId: any, javaScriptKey: any): void;

            function setAsyncStorage(storage: any): void;

            namespace Analytics {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Analytics
                const track: any;

            }

            namespace Cloud {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Cloud
                const getJobStatus: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Cloud
                const getJobsData: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Cloud
                const run: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Cloud
                const startJob: any;

            }

            namespace CoreManager {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const get: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getAnalyticsController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getAsyncStorage: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getCloudController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getConfigController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getFileController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getHooksController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getInstallationController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getLiveQueryController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getObjectController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getObjectStateController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getPushController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getQueryController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getRESTController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getSchemaController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getSessionController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getStorageController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const getUserController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const set: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setAnalyticsController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setAsyncStorage: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setCloudController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setConfigController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setFileController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setHooksController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setInstallationController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setLiveQueryController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setObjectController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setObjectStateController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setPushController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setQueryController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setRESTController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setSchemaController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setSessionController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setStorageController: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.CoreManager
                const setUserController: any;

            }

            namespace FacebookUtils {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.FacebookUtils
                const init: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.FacebookUtils
                const isLinked: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.FacebookUtils
                const link: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.FacebookUtils
                const logIn: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.FacebookUtils
                const unlink: any;

            }

            namespace Installation {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const className: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const createWithoutData: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const destroyAll: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const disableSingleInstance: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const enableSingleInstance: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const extend: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const fetchAll: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const fetchAllIfNeeded: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const fetchAllWithInclude: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const fromJSON: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const registerSubclass: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Installation
                const saveAll: any;

            }

            namespace LiveQuery {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const addListener: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const close: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const emit: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const eventNames: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const getMaxListeners: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const listenerCount: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const listeners: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const off: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const on: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const once: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const open: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const prependListener: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const prependOnceListener: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const rawListeners: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const removeAllListeners: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const removeListener: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.LiveQuery
                const setMaxListeners: any;

            }

            namespace Op {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Add: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const AddUnique: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Increment: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Relation: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Remove: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Set: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Op
                const Unset: any;

            }

            namespace Parse {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const ACL: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Analytics: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Cloud: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Config: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const CoreManager: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Error: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const FacebookUtils: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const File: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const GeoPoint: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Installation: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const LiveQuery: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const LiveQueryClient: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Object: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Op: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Parse: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Polygon: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Push: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Query: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Relation: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Role: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Schema: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Session: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const Storage: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const User: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const applicationId: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const initialize: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const javaScriptKey: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const liveQueryServerURL: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const masterKey: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const serverURL: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Parse
                const setAsyncStorage: any;

            }

            namespace Push {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Push
                const send: any;

            }

            namespace Storage {
                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const async: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const generatePath: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const getItem: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const getItemAsync: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const removeItem: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const removeItemAsync: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const setItem: any;

                // Too-deep object hierarchy from parse.Parse.Parse.Parse.Storage
                const setItemAsync: any;

            }

        }

        namespace Push {
            function send(data: any, options: any): any;

        }

        namespace Storage {
            function async(): any;

            function generatePath(path: any): any;

            function getItem(path: any): any;

            function getItemAsync(path: any): any;

            function removeItem(path: any): any;

            function removeItemAsync(path: any): any;

            function setItem(path: any, value: any): any;

            function setItemAsync(path: any, value: any): any;

        }

    }

    namespace Push {
        function send(data: any, options: any): any;

    }

    namespace Storage {
        function async(): any;

        function generatePath(path: any): any;

        function getItem(path: any): any;

        function getItemAsync(path: any): any;

        function removeItem(path: any): any;

        function removeItemAsync(path: any): any;

        function setItem(path: any, value: any): any;

        function setItemAsync(path: any, value: any): any;

    }

}

export namespace Push {
    function send(data: any, options: any): any;

}

export namespace Storage {
    function async(): any;

    function generatePath(path: any): any;

    function getItem(path: any): any;

    function getItemAsync(path: any): any;

    function removeItem(path: any): any;

    function removeItemAsync(path: any): any;

    function setItem(path: any, value: any): any;

    function setItemAsync(path: any, value: any): any;

}
